// vite.config.ts
import { resolve } from "path";

// build/plugins/index.ts
import react from "file:///D:/project/wuhu-react-admin/node_modules/.pnpm/@vitejs+plugin-react@4.2.1_vite@5.2.2/node_modules/@vitejs/plugin-react/dist/index.mjs";
import legacy from "file:///D:/project/wuhu-react-admin/node_modules/.pnpm/@vitejs+plugin-legacy@5.3.2_terser@5.29.2_vite@5.2.2/node_modules/@vitejs/plugin-legacy/dist/index.mjs";

// build/plugins/dynamicImport.ts
import dynamicImport from "file:///D:/project/wuhu-react-admin/node_modules/.pnpm/vite-plugin-dynamic-import@1.5.0/node_modules/vite-plugin-dynamic-import/dist/index.mjs";
function dynamicImportPlugin() {
  return dynamicImport({
    filter: (id) => id.includes("/node_modules/")
  });
}

// build/plugins/unocss.ts
import UnoCSS from "file:///D:/project/wuhu-react-admin/node_modules/.pnpm/unocss@0.58.6_postcss@8.4.38_rollup@3.29.4_vite@5.2.2/node_modules/unocss/dist/vite.mjs";
function unocssPlugin() {
  return UnoCSS();
}

// build/plugins/removeConsole.ts
import removeConsole from "file:///D:/project/wuhu-react-admin/node_modules/.pnpm/vite-plugin-remove-console@2.2.0/node_modules/vite-plugin-remove-console/dist/index.mjs";
function createremoveConsole() {
  return removeConsole({
    // 包含的console类型
    includes: ["log", "warn", "error", "info"]
  });
}

// build/plugins/cdn.ts
import { importToCDN, autoComplete } from "file:///D:/project/wuhu-react-admin/node_modules/.pnpm/vite-plugin-external-cdn@1.0.1_rollup@3.29.4_vite@5.2.2/node_modules/vite-plugin-external-cdn/dist/index.js";
function cdnPlugin() {
  return importToCDN({
    modules: [autoComplete("react"), autoComplete("react-dom")]
  });
}

// build/plugins/compression.ts
import { compression } from "file:///D:/project/wuhu-react-admin/node_modules/.pnpm/vite-plugin-compression2@1.0.0_rollup@3.29.4/node_modules/vite-plugin-compression2/dist/index.mjs";
function compressionPlugin() {
  return compression({
    // 使用的压缩算法
    algorithm: "gzip",
    // 排除符合任何条件的所有资源,这些资源都不会进行压缩
    exclude: [/\.(br)$/, /\.(gz)$/],
    // 是否删除原始资源,默认false
    deleteOriginalAssets: true,
    // 如果压缩结果大于或等于原始文件,是否跳过压缩,默认true
    skipIfLargerOrEqual: true
  });
}

// build/plugins/imageOptimizer.ts
import { ViteImageOptimizer } from "file:///D:/project/wuhu-react-admin/node_modules/.pnpm/vite-plugin-image-optimizer@1.1.7_vite@5.2.2/node_modules/vite-plugin-image-optimizer/dist/index.mjs";
function imageOptimizerPlugin() {
  return ViteImageOptimizer({
    // 处理的图片格式
    include: /\.(jpe?g|png|gif|tiff|webp|svg|avif)$/i,
    // png格式压缩配置,quality表示压缩质量
    png: {
      quality: 10
    },
    // jpg格式压缩配置,quality表示压缩质量
    jpg: {
      quality: 10
    },
    // jpeg格式压缩配置,quality表示压缩质量
    jpeg: {
      quality: 10
    },
    // gif格式压缩配置
    gif: {},
    // webp格式压缩配置,lossless表示是否启用无损压缩
    webp: {
      lossless: true
    },
    // avif格式压缩配置,lossless表示是否启用无损压缩
    avif: {
      lossless: true
    },
    // 是否启用缓存,启用后从指定路径读取和写入带有哈希后缀的资产文件,默认false
    cache: true,
    // 缓存文件的位置
    cacheLocation: "./node_modules/image-optimizer/"
  });
}

// build/plugins/mock.ts
import mockDevServerPlugin from "file:///D:/project/wuhu-react-admin/node_modules/.pnpm/vite-plugin-mock-dev-server@1.4.7_rollup@3.29.4_vite@5.2.2/node_modules/vite-plugin-mock-dev-server/dist/index.js";
function mockPlugin() {
  return mockDevServerPlugin({
    // prefix: '^/api/',
    include: ["mock/**/*.mock.{ts,js,cjs,mjs,json,json5}"],
    build: {
      serverPort: 3e3
    }
  });
}

// build/plugins/index.ts
function createPlugins() {
  return [
    mockPlugin(),
    dynamicImportPlugin(),
    // tailwindCSSPlugin(),
    legacy({
      targets: ["defaults", "not IE 11"]
    }),
    react(),
    unocssPlugin(),
    createremoveConsole(),
    cdnPlugin(),
    compressionPlugin(),
    imageOptimizerPlugin()
    // checkUpdatePlugin(),
  ];
}

// vite.config.ts
var pathResolve = (dir) => resolve(process.cwd(), ".", dir);
var crateResolve = () => {
  return {
    alias: [
      {
        find: "@",
        replacement: pathResolve("src") + "/"
      },
      {
        find: "#",
        replacement: pathResolve("types") + "/"
      }
    ]
  };
};
var vite_config_default = ({ command, mode }) => {
  return {
    resolve: crateResolve(),
    plugins: createPlugins(),
    server: {
      cors: true,
      // port: 5173,
      proxy: {
        "^/api": {
          target: "http://localhost:3000/"
          // rewrite: (path) => path.replace(/^\/api/, ''),
        }
      }
    },
    esbuild: {
      target: "ES2022"
    },
    envDir: "env"
  };
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
