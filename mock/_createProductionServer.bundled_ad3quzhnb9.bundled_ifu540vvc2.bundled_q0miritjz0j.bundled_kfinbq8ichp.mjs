// mock/_createProductionServer.bundled_ad3quzhnb9.bundled_ifu540vvc2.bundled_q0miritjz0j.mjs
import { createProdMockServer } from "vite-plugin-mock/es/createProdMockServer";
function ok(data, message = "ok") {
  return {
    code: 200,
    message,
    data
  };
}
function error(message = "error") {
  return {
    code: 500,
    message,
    data: null
  };
}
function getAccessToken(headers) {
  return headers?.authorization;
}
function mockUserList() {
  return [
    {
      userId: 1,
      username: "2684837849",
      password: "123456",
      nickname: "zchengfeng",
      avatar: "https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg",
      token: "fakeToken1"
    },
    {
      userId: 2,
      username: "admin",
      password: "123456",
      nickname: "wuhu",
      avatar: "https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg",
      token: "fakeToken2"
    }
  ];
}
var user_default = [
  {
    url: "/auth/doLogin",
    timeout: 200,
    method: "post",
    response: ({ body }) => {
      const { username, password } = body;
      const user = mockUserList().find((item) => {
        return item.username === username && item.password === password;
      });
      return user ? ok({ access_token: user.token }) : error("\u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF");
    }
  },
  {
    url: "/auth/logout",
    timeout: 200,
    method: "get",
    response: ({ headers }) => {
      const accessToken = getAccessToken(headers);
      const user = mockUserList().find((item) => item.token === accessToken);
      return user ? ok(null, "Token has been destroyed") : error("Invalid token!");
    }
  },
  {
    url: "/user/getRoleList",
    method: "get",
    response: () => {
      return "error";
    }
  }
];
var role_default = [
  {
    url: "/role/getRoleList",
    statusCode: 200,
    method: "get",
    response: () => {
      return "error";
    }
  }
];
function setupProdMockServer() {
  createProdMockServer([role_default, user_default]);
}
export {
  setupProdMockServer
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibW9jay9tb2NrL21vY2svbW9jay9fY3JlYXRlUHJvZHVjdGlvblNlcnZlci50cyIsICJtb2NrL21vY2svbW9jay9tb2NrL191dGlsLnRzIiwgIm1vY2svbW9jay9tb2NrL21vY2svc3lzL3VzZXIudHMiLCAibW9jay9tb2NrL21vY2svbW9jay9zeXMvcm9sZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJDOlxcXFxhcHBcXFxccHJvamVjdFxcXFx3ZWJcXFxcd3VodS1yZWFjdC1hZG1pblxcXFxtb2NrXFxcXF9jcmVhdGVQcm9kdWN0aW9uU2VydmVyLnRzXCI7Y29uc3QgX19pbmplY3RlZF9kaXJuYW1lX18gPSBcIkM6XFxcXGFwcFxcXFxwcm9qZWN0XFxcXHdlYlxcXFx3dWh1LXJlYWN0LWFkbWluXFxcXG1vY2tcIjtjb25zdCBfX2luamVjdGVkX2ltcG9ydF9tZXRhX3VybF9fID0gXCJmaWxlOi8vL0M6L2FwcC9wcm9qZWN0L3dlYi93dWh1LXJlYWN0LWFkbWluL21vY2svX2NyZWF0ZVByb2R1Y3Rpb25TZXJ2ZXIudHNcIjtpbXBvcnQgeyBjcmVhdGVQcm9kTW9ja1NlcnZlciB9IGZyb20gJ3ZpdGUtcGx1Z2luLW1vY2svZXMvY3JlYXRlUHJvZE1vY2tTZXJ2ZXInO1xyXG5pbXBvcnQgeyBzeXNSb2xlLCBzeXNVc2VyIH0gZnJvbSAnLi9zeXMnO1xyXG5cclxuLy8gY29uc3QgbW9kdWxlcyA9IGltcG9ydC5tZXRhLmdsb2IoXCIuLyoqLyoudHNcIik7XHJcbi8vIGNvbnN0IG1vY2tNb2R1bGVzOiBhbnlbXSA9IFtdO1xyXG5cclxuLy8gT2JqZWN0LmtleXMobW9kdWxlcykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbi8vICAgaWYgKGtleS5pbmNsdWRlcyhcIi9fXCIpKSB7XHJcbi8vICAgICByZXR1cm47XHJcbi8vICAgfVxyXG4vLyAgIG1vY2tNb2R1bGVzLnB1c2goLi4uKG1vZHVsZXNba2V5XSBhcyBhbnkpLmRlZmF1bHQpO1xyXG4vLyB9KTtcclxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwUHJvZE1vY2tTZXJ2ZXIoKSB7XHJcbiAgY3JlYXRlUHJvZE1vY2tTZXJ2ZXIoW3N5c1JvbGUsIHN5c1VzZXJdKTtcclxufVxyXG4iLCAiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJDOlxcXFxhcHBcXFxccHJvamVjdFxcXFx3ZWJcXFxcd3VodS1yZWFjdC1hZG1pblxcXFxtb2NrXFxcXF91dGlsLnRzXCI7Y29uc3QgX19pbmplY3RlZF9kaXJuYW1lX18gPSBcIkM6XFxcXGFwcFxcXFxwcm9qZWN0XFxcXHdlYlxcXFx3dWh1LXJlYWN0LWFkbWluXFxcXG1vY2tcIjtjb25zdCBfX2luamVjdGVkX2ltcG9ydF9tZXRhX3VybF9fID0gXCJmaWxlOi8vL0M6L2FwcC9wcm9qZWN0L3dlYi93dWh1LXJlYWN0LWFkbWluL21vY2svX3V0aWwudHNcIjtpbXBvcnQgeyBTdGF0dXNDb2RlRW51bSB9IGZyb20gJ0AvZW51bXMvaHR0cCc7XHJcbmV4cG9ydCBmdW5jdGlvbiBvazxUPihkYXRhOiBULCBtZXNzYWdlOiBzdHJpbmcgPSAnb2snKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGNvZGU6IFN0YXR1c0NvZGVFbnVtLlNVQ0NFU1MsXHJcbiAgICBtZXNzYWdlLFxyXG4gICAgZGF0YSxcclxuICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBlcnJvcihtZXNzYWdlOiBzdHJpbmcgPSAnZXJyb3InKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGNvZGU6IFN0YXR1c0NvZGVFbnVtLkVSUk9SLFxyXG4gICAgbWVzc2FnZSxcclxuICAgIGRhdGE6IG51bGwsXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuKGhlYWRlcnM6IFJlY29yZGFibGUpIHtcclxuICByZXR1cm4gaGVhZGVycz8uYXV0aG9yaXphdGlvbjtcclxufVxyXG4iLCAiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJDOlxcXFxhcHBcXFxccHJvamVjdFxcXFx3ZWJcXFxcd3VodS1yZWFjdC1hZG1pblxcXFxtb2NrXFxcXHN5c1xcXFx1c2VyLnRzXCI7Y29uc3QgX19pbmplY3RlZF9kaXJuYW1lX18gPSBcIkM6XFxcXGFwcFxcXFxwcm9qZWN0XFxcXHdlYlxcXFx3dWh1LXJlYWN0LWFkbWluXFxcXG1vY2tcXFxcc3lzXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9DOi9hcHAvcHJvamVjdC93ZWIvd3VodS1yZWFjdC1hZG1pbi9tb2NrL3N5cy91c2VyLnRzXCI7aW1wb3J0IHsgTW9ja01ldGhvZCB9IGZyb20gJ3ZpdGUtcGx1Z2luLW1vY2snO1xyXG5pbXBvcnQgeyBlcnJvciwgZ2V0QWNjZXNzVG9rZW4sIG9rIH0gZnJvbSAnLi4vX3V0aWwnO1xyXG5cclxuZnVuY3Rpb24gbW9ja1VzZXJMaXN0KCkge1xyXG4gIHJldHVybiBbXHJcbiAgICB7XHJcbiAgICAgIHVzZXJJZDogMSxcclxuICAgICAgdXNlcm5hbWU6ICcyNjg0ODM3ODQ5JyxcclxuICAgICAgcGFzc3dvcmQ6ICcxMjM0NTYnLFxyXG4gICAgICBuaWNrbmFtZTogJ3pjaGVuZ2ZlbmcnLFxyXG4gICAgICBhdmF0YXI6ICdodHRwczovL2d3LmFsaXBheW9iamVjdHMuY29tL3pvcy9ybXNwb3J0YWwvS0RwZ3ZndU1wR2ZxYUhQamljUksuc3ZnJyxcclxuICAgICAgdG9rZW46ICdmYWtlVG9rZW4xJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHVzZXJJZDogMixcclxuICAgICAgdXNlcm5hbWU6ICdhZG1pbicsXHJcbiAgICAgIHBhc3N3b3JkOiAnMTIzNDU2JyxcclxuICAgICAgbmlja25hbWU6ICd3dWh1JyxcclxuICAgICAgYXZhdGFyOiAnaHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL0tEcGd2Z3VNcEdmcWFIUGppY1JLLnN2ZycsXHJcbiAgICAgIHRva2VuOiAnZmFrZVRva2VuMicsXHJcbiAgICB9LFxyXG4gIF07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFtcclxuICB7XHJcbiAgICB1cmw6ICcvYXV0aC9kb0xvZ2luJyxcclxuICAgIHRpbWVvdXQ6IDIwMCxcclxuICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgcmVzcG9uc2U6ICh7IGJvZHkgfSkgPT4ge1xyXG4gICAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gYm9keTtcclxuICAgICAgY29uc3QgdXNlciA9IG1vY2tVc2VyTGlzdCgpLmZpbmQoKGl0ZW0pID0+IHtcclxuICAgICAgICByZXR1cm4gaXRlbS51c2VybmFtZSA9PT0gdXNlcm5hbWUgJiYgaXRlbS5wYXNzd29yZCA9PT0gcGFzc3dvcmQ7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gdXNlciA/IG9rKHsgYWNjZXNzX3Rva2VuOiB1c2VyLnRva2VuIH0pIDogZXJyb3IoJ1x1NzUyOFx1NjIzN1x1NTQwRFx1NjIxNlx1NUJDNlx1NzgwMVx1OTUxOVx1OEJFRicpO1xyXG4gICAgfSxcclxuICB9LFxyXG4gIHtcclxuICAgIHVybDogJy9hdXRoL2xvZ291dCcsXHJcbiAgICB0aW1lb3V0OiAyMDAsXHJcbiAgICBtZXRob2Q6ICdnZXQnLFxyXG4gICAgcmVzcG9uc2U6ICh7IGhlYWRlcnMgfSkgPT4ge1xyXG4gICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGdldEFjY2Vzc1Rva2VuKGhlYWRlcnMpO1xyXG4gICAgICBjb25zdCB1c2VyID0gbW9ja1VzZXJMaXN0KCkuZmluZCgoaXRlbSkgPT4gaXRlbS50b2tlbiA9PT0gYWNjZXNzVG9rZW4pO1xyXG4gICAgICByZXR1cm4gdXNlciA/IG9rKG51bGwsICdUb2tlbiBoYXMgYmVlbiBkZXN0cm95ZWQnKSA6IGVycm9yKCdJbnZhbGlkIHRva2VuIScpO1xyXG4gICAgfSxcclxuICB9LFxyXG4gIHtcclxuICAgIHVybDogJy91c2VyL2dldFJvbGVMaXN0JyxcclxuICAgIG1ldGhvZDogJ2dldCcsXHJcbiAgICByZXNwb25zZTogKCkgPT4ge1xyXG4gICAgICByZXR1cm4gJ2Vycm9yJztcclxuICAgIH0sXHJcbiAgfSxcclxuXSBhcyBNb2NrTWV0aG9kW107XHJcbiIsICJjb25zdCBfX2luamVjdGVkX2ZpbGVuYW1lX18gPSBcIkM6XFxcXGFwcFxcXFxwcm9qZWN0XFxcXHdlYlxcXFx3dWh1LXJlYWN0LWFkbWluXFxcXG1vY2tcXFxcc3lzXFxcXHJvbGUudHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiQzpcXFxcYXBwXFxcXHByb2plY3RcXFxcd2ViXFxcXHd1aHUtcmVhY3QtYWRtaW5cXFxcbW9ja1xcXFxzeXNcIjtjb25zdCBfX2luamVjdGVkX2ltcG9ydF9tZXRhX3VybF9fID0gXCJmaWxlOi8vL0M6L2FwcC9wcm9qZWN0L3dlYi93dWh1LXJlYWN0LWFkbWluL21vY2svc3lzL3JvbGUudHNcIjtpbXBvcnQgeyBNb2NrTWV0aG9kIH0gZnJvbSAndml0ZS1wbHVnaW4tbW9jayc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBbXHJcbiAge1xyXG4gICAgdXJsOiAnL3JvbGUvZ2V0Um9sZUxpc3QnLFxyXG4gICAgc3RhdHVzQ29kZTogMjAwLFxyXG4gICAgbWV0aG9kOiAnZ2V0JyxcclxuICAgIHJlc3BvbnNlOiAoKSA9PiB7XHJcbiAgICAgIHJldHVybiAnZXJyb3InO1xyXG4gICAgfSxcclxuICB9LFxyXG5dIGFzIE1vY2tNZXRob2RbXTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUEwUyxTQUFTLDRCQUE0QjtBQ0N4VSxTQUFTLEdBQU0sTUFBUyxVQUFrQixNQUFNO0FBQ3JELFNBQU87SUFDTCxNQUFBO0lBQ0E7SUFDQTtFQUNGO0FBQ0Y7QUFDTyxTQUFTLE1BQU0sVUFBa0IsU0FBUztBQUMvQyxTQUFPO0lBQ0wsTUFBQTtJQUNBO0lBQ0EsTUFBTTtFQUNSO0FBQ0Y7QUFFTyxTQUFTLGVBQWUsU0FBcUI7QUFDbEQsU0FBTyxTQUFTO0FBQ2xCO0FDZkEsU0FBUyxlQUFlO0FBQ3RCLFNBQU87SUFDTDtNQUNFLFFBQVE7TUFDUixVQUFVO01BQ1YsVUFBVTtNQUNWLFVBQVU7TUFDVixRQUFRO01BQ1IsT0FBTztJQUNUO0lBQ0E7TUFDRSxRQUFRO01BQ1IsVUFBVTtNQUNWLFVBQVU7TUFDVixVQUFVO01BQ1YsUUFBUTtNQUNSLE9BQU87SUFDVDtFQUNGO0FBQ0Y7QUFFQSxJQUFPLGVBQVE7RUFDYjtJQUNFLEtBQUs7SUFDTCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVUsQ0FBQyxFQUFFLEtBQUssTUFBTTtBQUN0QixZQUFNLEVBQUUsVUFBVSxTQUFTLElBQUk7QUFDL0IsWUFBTSxPQUFPLGFBQWEsRUFBRSxLQUFLLENBQUMsU0FBUztBQUN6QyxlQUFPLEtBQUssYUFBYSxZQUFZLEtBQUssYUFBYTtNQUN6RCxDQUFDO0FBQ0QsYUFBTyxPQUFPLEdBQUcsRUFBRSxjQUFjLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxrREFBVTtJQUNuRTtFQUNGO0VBQ0E7SUFDRSxLQUFLO0lBQ0wsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVLENBQUMsRUFBRSxRQUFRLE1BQU07QUFDekIsWUFBTSxjQUFjLGVBQWUsT0FBTztBQUMxQyxZQUFNLE9BQU8sYUFBYSxFQUFFLEtBQUssQ0FBQyxTQUFTLEtBQUssVUFBVSxXQUFXO0FBQ3JFLGFBQU8sT0FBTyxHQUFHLE1BQU0sMEJBQTBCLElBQUksTUFBTSxnQkFBZ0I7SUFDN0U7RUFDRjtFQUNBO0lBQ0UsS0FBSztJQUNMLFFBQVE7SUFDUixVQUFVLE1BQU07QUFDZCxhQUFPO0lBQ1Q7RUFDRjtBQUNGO0FDcERBLElBQU8sZUFBUTtFQUNiO0lBQ0UsS0FBSztJQUNMLFlBQVk7SUFDWixRQUFRO0lBQ1IsVUFBVSxNQUFNO0FBQ2QsYUFBTztJQUNUO0VBQ0Y7QUFDRjtBSENPLFNBQVMsc0JBQXNCO0FBQ3BDLHVCQUFxQixDQUFDLGNBQVMsWUFBTyxDQUFDO0FBQ3pDOyIsCiAgIm5hbWVzIjogW10KfQo=
